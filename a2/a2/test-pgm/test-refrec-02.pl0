// Correct program. Check equals and not equals comparisons of records of the same type. Writes: 100, ..., 90
type
    RT =  record
           x: int;
           y: int;
           z: int
         end;
    AT = RT; // an alias for same type as RT
var
    r1: RT;
    r2: RT;
    r3: AT; // r1, r2 and r3 are of the same type, and so can be compared
begin
  if nil = nil then // true
     write 100
  else
     write -1;
  if nil != nil then // false
     write -1
  else
     write 99;
  if r1 = r2 then // true because r1 and r2 initially have nil value
     write 98
  else
     write -1;
  r1 := new RT(99, 98, 97);
  r2 := new RT(99, 98, 97);
  r3 := new RT(99, 98, 97); // permissible as RT and AT refer to the same record type
  if r1 = r2 then // not true even though r1 and r2 have the same fields values
       write -1
    else
       write 97;
  if r1 != r2 then // true even though r1 and r2 have the same fields values
       write 96
    else
       write -1;
  r1 := r2;        // record assignment (r1 and r2 now both refer to the same record)
  if r1 = r2 then // true because r1 and r2 have the same type and refer to the same record
       write 95
    else
       write -1;
  if r1 != r2 then // false because r1 and r2 have the same type and refer to the same record
       write -1
    else
       write 94;
  r1 := nil;
  if r1 = nil then // true
       write 93
    else
       write -1;
  if r1 != nil then // false
         write -1
      else
         write 92;
   if r1 = r2 then // false
          write -1
       else
          write 91;
   r3 := r2; // permissible as RT and AT refer to the same record type
   if r2 = r3 then // true
          write 90
       else
          write -1
end
